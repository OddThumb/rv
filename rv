#!/usr/local/bin/Rscript

# Checking "tidyverse" package is installed
packages <- c("tidyverse", "shiny", "FITSio", "plotly")
installed <- packages %in% rownames(installed.packages())
if (!all(installed)) {
    sapply(packages[!installed], install.packages, quite=TRUE)
}
options(tidyverse.quiet = TRUE)
sapply(packages, require, character.only=T, quietly=T)

read_fits <- function(file) {
    fits <- FITSio::readFITS(as.character(file))
    names(fits$col) <- fits$colNames
    bind_cols(fits$col)
}

resolve.table <- function(file) {
    ext <<- tools::file_ext(file)
    switch(ext,
           "csv"=read.csv(file),
           "tsv"=read.table(file, header=T, sep="\t"),
           "fits"=read_fits(file))
}

args <- commandArgs(trailingOnly=TRUE)
ext.vec <- c()
for(i in 1:length(args)) { 
    table <- resolve.table(args[[i]])
    ext.vec <- append(ext.vec, ext)
    table.name <- basename(as.character(args[i]))
    assign(table.name, table)
}

ls.tables <- ls(pattern = paste(paste("\\.",ext.vec,sep=""),collapse = "|"))

library(shiny)
runApp(
    list(ui = fluidPage(
        headerPanel('R View (rv)'),
        sidebarLayout(
            sidebarPanel(
                selectInput("dataset", label = "Select dataset", choices = ls.tables),
                
                radioButtons(
                    inputId="radio",
                    label="Variable Selection Type:",
                    choices=list(
                        "All",
                        "Manual Select"
                    ),
                    selected="All"),
                
                conditionalPanel(
                    condition = "input.radio != 'All'",
                    uiOutput("checkbox")
                )
            ),
            mainPanel(
                tabsetPanel(
                    type="tabs",
                    tabPanel("Table", dataTableOutput("table")),
                    tabPanel("Summary", verbatimTextOutput("summary")),
                    tabPanel("Plot", 
                             fluidRow(
                                 column(5, uiOutput("plot_cols")),
                                 column(5, uiOutput("plot_type")),
                                 column(5, uiOutput("color_by")),
                                 column(5, uiOutput("symbol_by"))
                             ),
                             plotly::plotlyOutput("plot")
                             )
                )
                
            )
        )
    )
    , server = function(input, output, session) {
        # READ TABLE ----
        datasetInput <- reactive({
            get(input$dataset)
            #if (input$radio == "All") {
            #    get(input$dataset)
            #} else {
            #    get(input$dataset)[,input$select_var,drop=FALSE]
            #}
        })
        
        # Dynamically generate UI input when data is uploaded ----
        output$checkbox <- renderUI({
            if (input$radio=="All") {
                sel.cols <- names(datasetInput())
            } else {
                sel.cols <- NULL
            }
            checkboxGroupInput(inputId = "select_var", 
                               label = "Select variables", 
                               choices = names(datasetInput()),
                               selected = sel.cols)
        })
        
        # Select columns to print ----
        datasetInput_sel <- reactive({
            req(input$select_var)
            datasetInput_sel <- datasetInput() %>% select(input$select_var)
        })
        
        # Print data table ----  
        output$table <- renderDataTable({
            datasetInput_sel()
        }, options = list(dom = 'ltipr', 
                          orderClasses = TRUE, 
                          lengthMenu = c(5, 25, 50, 75, 100), 
                          pageLength = 25)
        )
        
        # Print summary ----
        output$summary <- renderPrint({
            summary(datasetInput_sel())
        })
        
        # Generate a plot of the data ----
        # Also uses the inputs to build the plot label. Note that the
        # dependencies on the inputs and the data reactive expression are
        # both tracked, and all expressions are called in the sequence
        # implied by the dependency graph.
        output$plot_cols <- renderUI({
            selectizeInput(
                inputId = "columns",
                label = "Select columns for plot (max. 3)",
                choices = names(datasetInput_sel()),
                multiple = TRUE
            )
        })
        
        output$plot_type <- renderUI({
            selectizeInput(
                inputId = "plottype",
                label = "Select plot type (default: scatter)",
                choices = c("scatter", "line", "scatter+line", "histogram", "density", "bar"),
                selected = "scatter",
                multiple = F
            )
        })
        
        output$color_by <- renderUI({
            selectizeInput(
                inputId = "colorby",
                label = "Select a column for color",
                choices = names(datasetInput_sel()),
                multiple = F
            )
        })
        
        output$symbol_by <- renderUI({
            selectizeInput(
                inputId = "symbolby",
                label = "Select a column for symbol",
                choices = names(datasetInput_sel()),
                multiple = F
            )
        })
        
        output$plot <- plotly::renderPlotly({
            if (input$plottype %in% c("histogram", "density", "bar")) {
                fig <- plotly::plot_ly(data=datasetInput_sel(), alpha=0.7)
                switch(
                    input$plottype,
                    "histogram"={
                        fig <- fig %>% 
                            plotly::add_histogram(x=~get(input$columns[1])) %>%
                            plotly::layout(barmode = "overlay",
                                           xaxis=list(title=input$columns[1]))
                    },
                    "density"={
                        fig <- plotly::plot_ly(type = 'scatter', mode = 'lines')
                        dens <- density(datasetInput_sel()[,input$columns[1]])
                        fig <- fig %>% 
                            plotly::add_trace(x=~dens$x, y=~dens$y) %>% 
                            plotly::layout(xaxis=list(title=input$columns[1]),
                                           yaxis=list(title="Density"))
                    },
                    "bar"={
                        fig <- fig %>% 
                            plotly::add_bars(x=~get(input$columns[1]),
                                             y=~get(input$columns[2])) %>%
                            plotly::layout(xaxis=list(title=input$columns[1]),
                                           yaxis=list(title=input$columns[2]))
                    })
                
                
            } else {
                if (length(input$columns) == 2) {
                    fig <- plotly::plot_ly(data=datasetInput_sel(), 
                                           x=~get(input$columns[1]), 
                                           y=~get(input$columns[2]),
                                           color=~get(input$colorby),
                                           symbol=~get(input$symbolby),
                                           type=input$plottype) %>%
                        plotly::layout(xaxis=list(title=input$columns[1]),
                                       yaxis=list(title=input$columns[2]))
                } else if (length(input$columns) >= 3) {
                    fig <- plotly::plot_ly(data=datasetInput_sel(), 
                                           x=~get(input$columns[1]), 
                                           y=~get(input$columns[2]),
                                           z=~get(input$columns[3]),
                                           color=~get(input$colorby),
                                           symbol=~get(input$symbolby),
                                           type=ifelse(input$plottype=="scatter","scatter3d",NULL)) %>%
                        plotly::layout(scene=list(
                            xaxis=list(title=input$columns[1]),
                            yaxis=list(title=input$columns[2]),
                            zaxis=list(title=input$columns[3])))
                }
            }

            fig
        })
    }
    ), launch.browser = TRUE
)
